Introduction :

    Typescript is superset of javascript [A language that building up on javascript ]
    It is a programming lang and also the tool for compiling the code ie (tsc-typescript compiler)
    TypeScript is an open-source, object-oriented programing language, which is developed and maintained by Microsoft under the Apache 2 license. It was introduced by Anders Hejlsberg, a core member of the development team of C# language.
    Typescript = advatages of javascript + adding new features
    Typescript can't  execute the code directly on browsers is one of the disadvantage

Execution process of Typescript :

                      +------------------------------------+
                      |                                    |
                      |          TypeScript Code           |
                      |     Here we write the code                                     |
                      +---------------------+--------------+
                                            |
                                            v
                      +---------------------+--------------+
                      |                                    |
                      |         Compilation                |
                      |                                    |
                      +---------------------+--------------+
                      |  When we were ready to run our     |
                      |TypeScript code,it use a TypeScript | 
                      |compiler(usually tsc,the TypeScript |
                      |Compiler)compile TypeScript files   |
                      | (.ts or .tsx extensions) into      |
                      |JavaScript files (.js extension)    |                               |
                      |   Converts TypeScript code         |
                      |   into equivalent JavaScript       |
                      |   code based on ECMAScript         |
                      |   standard                         |
                      |                                    |
                      +---------------------+--------------+
                                            |
                                            v
                      +---------------------+--------------+
                      |                                    |
                      |        Type Checking                |
                      |                                    |
                      +---------------------+--------------+
                      |                                    |
                      |   Static analysis of TypeScript    |
                      |   code to find type errors and     |
                      |   ensure type safety and           |
                      |   correctness                      |
                      |                                    |
                      +---------------------+--------------+
                                            |
                                            v
                      +---------------------+--------------+
                      |                                    |
                      |      Output JavaScript             |
                      |                                    |
                      +---------------------+--------------+
                      |                                    |
                      |   Generates JavaScript code       |
                      |   without TypeScript-specific     |
                      |   constructs (e.g., type          |
                      |   annotations)                     |
                      |                                    |
                      +---------------------+--------------+
                                            |
                                            v
                      +---------------------+--------------+
                      |                                    |
                      |       Run JavaScript               |
                      |                                    |
                      +---------------------+--------------+
                      |                                    |
                      |   Executes the generated           |
                      |   JavaScript code in a runtime     |
                      |   environment (e.g., browser,      |
                      |   Node.js)                         |
                      |                                    |
                      +---------------------+--------------+
                                            |
                                            v
                      +---------------------+--------------+
                      |                                    |
                      |          Result                    |
                      |                                    |
                      +------------------------------------+
____________________________________________________________________________________________________________

Here's a comparison between a Static Type Checker and a Dynamic Type Checker, along with examples programmed in TypeScript and Python respectively:

Static Type Checker :

Definition:
A static type checker analyzes the types of variables and expressions in code before it's executed.
Type Annotations: Requires explicit type annotations in the code.
Error Detection: Detects type errors before the code is executed.
Compilation: Type errors must be resolved before the code can be compiled.

Example in TypeScript:
function add(x: number, y: number): number {
    return x + y;
}

const result = add(5, "hello"); // Type error: "hello" is not a number
console.log(result);

In this TypeScript example, the static type checker detects a type error at compile time because the function add expects two parameters of type number, but "hello" (a string) is passed as the second argument.

Dynamic Type Checker:

Definition:
A dynamic type checker analyzes types at runtime, while the code is being executed.
Type Annotations: May or may not require explicit type annotations in the code.
Error Detection: May not detect type errors until the code is executed.
Compilation: Code can be compiled regardless of potential type errors.

Example in Python:    
def add(x, y):
    return x + y

result = add(5, "hello")  # No type error detected during compilation
print(result)

In this Python example, there are no explicit type annotations, and the type of x and y is determined dynamically based on the values passed during execution. The type error (adding a number to a string) is not detected until the code is executed, resulting in potential runtime errors.

In summary, a static type checker performs type checking at compile time, requiring explicit type annotations and detecting type errors before execution, while a dynamic type checker performs type checking at runtime, allowing more flexibility with type annotations but potentially delaying error detection until execution.
---------------------------------------------------------------------------------------------------------------
Why do we need TypeScript when we have JavaScript?

JavaScript, initially designed as a client-side language, expanded to server-side use. However, its growing complexity and limitations in Object-Oriented Programming hindered its enterprise adoption. To address this, TypeScript was created to enhance JavaScript, providing static typing and features for robust enterprise-level server-side development. 

Advantages of using TypeScript over JavaScript :

>TypeScript always points out the compilation errors at the time of development (pre-compilation). Because of this getting runtime errors is less likely, whereas JavaScript is an interpreted language.
>TypeScript supports static/strong typing. This means that type correctness can be checked at compile time. This feature is not available in JavaScript.
>TypeScript is nothing but JavaScript and some additional features i.e. ES6 features. It may not be supported in your target browser but the TypeScript compiler can compile the .ts files into ES3, ES4, and ES5 also.
 
Disadvantages of using TypeScript over JavaScript :

>Generally, TypeScript takes time to compile the code.
>TypeScript does not support abstract classes.
____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
TypescriptVSJavascript                                                                                                                           ___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
TypeScript	:                                    | JavaScript :                                            
Provides static typing	                         | Dynamically typed
Comes with IDEs and code editors 	             | Limited built-in tooling
Similar to JavaScript, with additional features  | Standard JavaScript syntax
Backward compatible with JavaScript 	         | Cannot run TypeScript in JavaScript files
Stronger typing can help identify errors 	     | May require more debugging and testing
__________________________________________________________________________________________________________________________
Install TypeScript globally:
npm install -g typescript - It installs the typescript globally 

check whether installed or not :
tsc --version - it give the version of typescript that installed in the system

Compilation :
tsc hello.ts - this will convert the typescript code into javascript by help tsc compiler and one file of javascript of same ts code is generated in the same directory

execution : node hello.js - the generated javascript file is executed and gives the ouput in the console
__________________________________________________________________________________________________________________________
variables :
variables are declared using let, const, or var keywords
1. let Keyword:

Declares a block-scoped local variable.
Can be reassigned within its scope.
2. const Keyword:

Declares a block-scoped read-only variable.
Cannot be reassigned once initialized.
3. var Keyword:

Declares a variable globally, or locally to an entire function regardless of block scope.
Can be reassigned and redeclared within its scope.

Note:
 var has some quirks and is generally avoided in modern TypeScript development in favor of let and const.
_________________________________________________________________________________________________________________________
DataTypes :
1. number: 
Represents numeric values, including integers and floating-point numbers
2. string: 
Represents textual data, enclosed within single quotes (') or double quotes (").
3. boolean:
 Represents a logical value, either true or false.
4. array:
 Represents a collection of elements of the same type. Arrays can be declared using square brackets ([]) with optional type annotation.
5. tuple:
 Represents an array with a fixed number of elements where each element may have a different type. Tuples are declared using square brackets ([]) with specific types for each element.
6. enum:
 Represents a set of named constants. Enums are useful for defining a fixed set of values.
7. any: 
Represents a dynamic or untyped value. Use of any allows you to opt out of type checking and enables operations that might result in runtime errors.
8. void: 
Represents the absence of a value. Typically used as the return type of functions that do not return a value.
9. null and undefined: 
Represents the absence of a value. They can be assigned to variables of any type.
__________________________________________________________________________________________________________________________
Functions :
Functions are the fundamental building blocks of any application. 
TypeScript allows to define functions with static typing for parameters and return values.

1.Named Function :
A named function in TypeScript is a function that has a name identifier. 
It can be defined using the function keyword followed by the function name. 
Named functions are often used when the same function may be called multiple times within the same scope or when the function needs to refer to itself recursively

2.Anonymous Function :
An anonymous function in TypeScript is a function that does not have a name.
It can be defined using the function keyword without specifying a name. 
Anonymous functions are often used as arguments to other functions or assigned to variables. 

3.Arrow Function :
An arrow function in TypeScript is a concise way to define a function using the  `=>` syntax. 
It's also known as a fat arrow function. 
Arrow functions have a shorter syntax compared to traditional function expressions and automatically capture the this value from the enclosing lexical context.
-------------------------------------------------------------------------------------------------
Interface :
Interfaces are used to define the structure of objects in TypeScript. They describe the properties and methods that an object should have.